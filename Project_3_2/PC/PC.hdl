CHIP PC {
    IN in[16], inc, load, reset;
    OUT out[16];
    
    PARTS:
    // Define a 16-bit constant zero
    // This creates a 16-bit zero constant to use in the Mux16
    Constant(value=false[16], out=zero);

    // Mux16 to select zero if reset is high, else the input from the current output
    Mux16(a=zero, b=out, sel=reset, out=resetOut);

    // Mux16 to select between in and incremented out
    Mux16(a=resetOut, b=in, sel=load, out=loadOut);

    // Increment the current output by 1 if inc is high
    Inc16(in=out, out=incrementedOut);
    Mux16(a=loadOut, b=incrementedOut, sel=inc, out=nextOut);

    // Register to hold the value, only update with nextOut if load is 1
    Register(in=nextOut, out=out, load=true);
}
// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/a/PC.hdl

/**
 * A 16-bit counter.
 * if      reset(t): out(t+1) = 0
 * else if load(t):  out(t+1) = in(t)
 * else if inc(t):   out(t+1) = out(t) + 1
 * else              out(t+1) = out(t)
 */

CHIP PC {
    IN in[16], inc, load, reset;
    OUT out[16];
    
    PARTS:
    // Register to hold the current counter state
    Register(in=nextOut, load=true, out=currOut);

    // Increment the current output (currOut)
    Inc16(in=currOut, out=incremented);

    // Mux16 to choose between the incremented value and the current value
    Mux16(a=currOut, b=incremented, sel=inc, out=incOut);

    // Mux16 to choose between the input value and the incremented/held value
    Mux16(a=incOut, b=in, sel=load, out=loadOut);

    // Mux16 to select between resetting to 0 or using the chosen output value
    Mux16(a=loadOut, b=false[16], sel=reset, out=nextOut);

    // Connect the Register output to the final PC output
    out=currOut;
}
