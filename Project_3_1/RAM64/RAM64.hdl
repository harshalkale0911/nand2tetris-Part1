// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/a/RAM64.hdl

/**
 * Memory of sixty-four 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // First level of DMux: Split load into two parts based on address[5]
    DMux(in=load, sel=address[5], a=loadLow, b=loadHigh);

    // Second level of DMux: Further split loadLow and loadHigh into four parts
    DMux(in=loadLow, sel=address[4], a=load0, b=load1);
    DMux(in=loadHigh, sel=address[4], a=load2, b=load3);

    // Third level of DMux: Split each of the four outputs into eight load signals
    DMux(in=load0, sel=address[3], a=load00, b=load01);
    DMux(in=load1, sel=address[3], a=load10, b=load11);
    DMux(in=load2, sel=address[3], a=load20, b=load21);
    DMux(in=load3, sel=address[3], a=load30, b=load31);

    // Instantiating 8 RAM8 chips with individual load signals from the DMux network
    RAM8(in=in, load=load00, address=address[0..2], out=out0);
    RAM8(in=in, load=load01, address=address[0..2], out=out1);
    RAM8(in=in, load=load10, address=address[0..2], out=out2);
    RAM8(in=in, load=load11, address=address[0..2], out=out3);
    RAM8(in=in, load=load20, address=address[0..2], out=out4);
    RAM8(in=in, load=load21, address=address[0..2], out=out5);
    RAM8(in=in, load=load30, address=address[0..2], out=out6);
    RAM8(in=in, load=load31, address=address[0..2], out=out7);

    // Mux8Way16 to select the output from one of the 8 RAM8 units based on address[3..5]
    Mux8Way16(a=out0, b=out1, c=out2, d=out3, e=out4, f=out5, g=out6, h=out7,
              sel=address[3..5], out=out);
}
