// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/a/RAM8.hdl

/**
 * Memory of eight 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    // First level DMux to split load into two
    DMux(in=load, sel=address[2], a=loadLow, b=loadHigh);

    // Second level DMux to further split into four for the lower group
    DMux(in=loadLow, sel=address[1], a=load0, b=load1);
    DMux(in=loadHigh, sel=address[1], a=load2, b=load3);

    // Third level DMux to split each of the previous outputs into two for the final eight
    DMux(in=load0, sel=address[0], a=load00, b=load01);
    DMux(in=load1, sel=address[0], a=load10, b=load11);
    DMux(in=load2, sel=address[0], a=load20, b=load21);
    DMux(in=load3, sel=address[0], a=load30, b=load31);

    // 8 registers to store 16-bit values, each controlled by one of the DMux outputs
    Register(in=in, load=load00, out=out0);
    Register(in=in, load=load01, out=out1);
    Register(in=in, load=load10, out=out2);
    Register(in=in, load=load11, out=out3);
    Register(in=in, load=load20, out=out4);
    Register(in=in, load=load21, out=out5);
    Register(in=in, load=load30, out=out6);
    Register(in=in, load=load31, out=out7);

    // Mux8Way16 to select the output of the addressed register
    Mux8Way16(a=out0, b=out1, c=out2, d=out3, e=out4, f=out5, g=out6, h=out7,
              sel=address, out=out);
}
