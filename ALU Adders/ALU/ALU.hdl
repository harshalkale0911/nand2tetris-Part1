// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl

/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // Apply zero and negate controls to x
    Mux16(a=x, b=false, sel=zx, out=xZeroed);
    Not16(in=xZeroed, out=xNegated);
    Mux16(a=xZeroed, b=xNegated, sel=nx, out=xFinal);

    // Apply zero and negate controls to y
    Mux16(a=y, b=false, sel=zy, out=yZeroed);
    Not16(in=yZeroed, out=yNegated);
    Mux16(a=yZeroed, b=yNegated, sel=ny, out=yFinal);

    // Compute x + y or x & y based on f
    Add16(a=xFinal, b=yFinal, out=addResult);
    And16(a=xFinal, b=yFinal, out=andResult);
    Mux16(a=andResult, b=addResult, sel=f, out=preOut);

    // Apply negate to the final output if needed
    Not16(in=preOut, out=outNegated);
    Mux16(a=preOut, b=outNegated, sel=no, out=out);

    // Set zr flag (zero flag)
    Or8Way(in=out[0..7], out=zrLow);
    Or8Way(in=out[8..15], out=zrHigh);
    Or(a=zrLow, b=zrHigh, out=zrInternal);
    Not(in=zrInternal, out=zr);

    // Set ng flag (negative flag)
    And(in=out[15], b=true, out=ng); // ng is true if the most significant bit is 1
}
